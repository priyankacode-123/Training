""" The script fetches crypto API information and creates CSV,Excel, XML and HTML document
    with the response received from the server while implementing OOPS
    Author - Priyanka Sirohiya
"""
import json
import requests
import pandas as pd
import pdfkit
import logging

logging.basicConfig(filename='logging_OOPS.log', level=logging.INFO,
                    format='%(asctime)s:%(levelname)s:%(message)s')


class Converter:
    """
        Takes API URL and generates CSV ,
        HTML , EXCEL , XML , PDF files with different function calls.
        constructor: __init__() to initializes the parameters of the instance created.
            A constructor is always called by default when object is created.
        Methods:
            create_df():
            Loads and normalize dataframe by reading response getting from method api_call()
            api_call():
            request the server and fetch the data
            to_excel(file_name):
            save the dataframe as Excel file
            to_csv(file_name):
            saves dataframe  as csv file
            to_xml(file_name):
            saves dataframe as xml file
            html_to_pdf(html_filename, pdf_filename):
            convert html file to pdf file
    """

    # Always called by default when object is created
    def __init__(self, api_url, desc):
        self.api_url = api_url
        self.dataframe = pd.DataFrame()
        self.desc = desc

    # used to implement built-in print function within our class
    def __str__(self):
        return f"The API data we are fetching is: {self.api_url}"

    # returns the length of an object
    def __len__(self):
        return int(len(self.desc))

    # allows for comparing two instances of a class
    def __eq__(self, other):
        return self.desc == other.desc

    def create_df(self):
        """
        Loads and normalize dataframe by reading response getting from method api_call()
        :return: none
        """
        try:
            response = self.api_call()
            self.dataframe = pd.json_normalize(response.json())
        except (json.JSONDecodeError, OSError) as e:
            logging.error('json data in response is not correct ' + str(e))

    def api_call(self):
        """
        request the server and fetch the data
        :return: response generated by server
        """
        try:
            response = requests.get(self.api_url)
            logging.info(response)
            return response
        except requests.exceptions.HTTPError as e:
            logging.error('HTTP error occurred ')
            logging.exception(e)
        except requests.exceptions.RequestException as e:
            logging.error('Error in establishing connection with API ' + str(e))
        except ConnectionError as ce:
            logging.error('A Connection error occurred ')
            logging.exception(ce)
        except requests.exceptions.ConnectTimeout as e:
            logging.error('Timeout error occurred ')
            logging.exception(e)

    def to_csv(self, filename):
        """
        Saves dataframe as CSV
        :param filename:takes CSV file name as input
        :return: none
        """
        try:
            self.dataframe.to_csv(filename, index=False)
        except PermissionError as e:
            logging.error('Got Permission Error' + str(e))
        else:
            logging.info('CSV File has been Generated : Filename - {}'.format(filename))

    def to_excel(self, file_name):
        """
        Saves dataframe as Excel
        :param file_name: takes Excel file name as input
        :return: None
        """
        try:
            ew = pd.ExcelWriter(file_name)
            self.dataframe.to_excel(ew, index=False)
            ew.save()
            logging.info('Excel file has been generated : Filename - {}'.format(file_name))
        except ValueError as ve:
            logging.error('Got value Error while trying to write Excel File {}'.format(ve))
        except PermissionError as pe:
            logging.error('Got Permission Error while trying to write Excel File {}'.format(pe))

    def to_html(self, file_name):
        """
        Saves dataframe as HTML
        :param file_name: takes HTML file name as input
        :return: None
        """
        try:
            self.dataframe.to_html(file_name, escape=False)
            logging.info('HTML is generated from CSV : Filename - {}'.format(file_name))
        except ValueError as ve:
            logging.error('Got value Error while trying to write HTML File {}'.format(ve))
        except PermissionError as pe:
            logging.error('Got Permission Error while trying to write HTML File {}'.format(pe))

    def to_xml(self, file_name):
        """
        Saves dataframe as xml
        :param file_name: takes xml file name as input
        :return: None
        """
        try:
            self.dataframe.to_xml(file_name)
            logging.info('XML file has been generated : Filename - {}'.format(file_name))
        except ValueError as ve:
            logging.error('Got value Error while trying to write XML File {}'.format(ve))
        except PermissionError as pe:
            logging.error('Got Permission Error while trying to write XML File {}'.format(pe))

    @staticmethod
    def html_to_pdf(html_file_name, pdf_file_name):
        """
        Converts HTML file into pdf while using pdfkit module
        :param html_file_name: HTML filename
        :param pdf_file_name: pdf filename that has to be created
        :return: none
        """
        try:
            path_wkhtmltopdf = r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'
            config = pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf)
            options = {'page-height': '2500', 'page-width': '1270', 'encoding': "UTF-8"}
            # CONVERT HTML FILE TO PDF WITH PDFKIT
            pdfkit.from_file(html_file_name, pdf_file_name, configuration=config, options=options)
            logging.info('pdf file has been generated : Filename - {}'.format(pdf_file_name))
        except FileNotFoundError as f:
            logging.error('pdf file not found {}'.format(f))
            logging.exception(f)
        except ValueError as ve:
            logging.error('Got value Error while trying to write pdf File {}'.format(ve))
        except PermissionError as pe:
            logging.error('Got Permission Error while trying to write pdf File {}'.format(pe))


if __name__ == '__main__':
    url = "https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&" \
          + "order=market_cap_desc&per_page=100&page=1&sparkline=false&price_" \
          + "change_percentage=1h%2C24h"
    url2 = "https://collectionapi.metmuseum.org/public/collection/v1/objects?departmentIds=1"

    # creating two objects of Converter class
    obj1 = Converter(api_url=url, desc="crypto URL")
    obj2 = Converter(api_url=url2, desc="museum URL")

    # calling __str__() method
    print(obj1)

    # calling __len__() method
    print(len(obj1))

    # calling __eq__() method
    print(obj1 == obj2)

    # loading dataframe
    obj1.create_df()

    # Calling methods to create different file formats
    obj1.to_csv("cry.csv")
    obj1.to_xml("Cry.xml")
    obj1.to_excel("cry.xlsx")
    obj1.to_html("cry.html")
    obj1.html_to_pdf("cry.html", "cry.pdf")
